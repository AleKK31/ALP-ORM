// **************************************************************************
// OrmGenerator
// **************************************************************************

// @dart=3.0
import 'package:supabase/supabase.dart';
import 'user.dart';

class AppUserRepository {
  final SupabaseClient _client;
  AppUserRepository(this._client);

  Future<AppUser?> findById(dynamic id) async {
    final data = await _client.from('users').select().eq('id', id).single();
    return data != null ? AppUser.fromJson(data as Map<String, dynamic>) : null;
  }

  Future<List<AppUser>> findAll() async {
    final data = await _client.from('users').select();
    return (data as List)
        .map<AppUser>((e) => AppUser.fromJson(e as Map<String, dynamic>))
        .toList();
  }

  Future<AppUser> insert(AppUser entity) async {
    final data =
        await _client.from('users').insert(entity.toJson()).select().single();
    return AppUser.fromJson(data as Map<String, dynamic>);
  }

  Future<void> delete(dynamic id) async {
    await _client.from('users').delete().eq('id', id);
  }

  Stream<List<AppUser>> subscribeToChanges() {
    return _client.from('users').stream(primaryKey: ['id']).map((data) =>
        (data as List)
            .map<AppUser>((e) => AppUser.fromJson(e as Map<String, dynamic>))
            .toList());
  }

  Future<List<AppUser>> query({
    String? select,
    Map<String, dynamic>? where,
    String? orderBy,
    bool? ascending,
    int? limit,
    int? offset,
  }) async {
    // Criar o builder base com tipo explícito
    final queryBuilder = _client.from('users').select(select ?? '*');

    // Aplicar filtros
    dynamic filteredQuery = queryBuilder;
    if (where != null) {
      where.forEach((key, value) {
        if (value is Map) {
          value.forEach((operator, opValue) {
            switch (operator) {
              case 'neq':
                filteredQuery =
                    (filteredQuery as PostgrestFilterBuilder).neq(key, opValue);
                break;
              case 'gt':
                filteredQuery =
                    (filteredQuery as PostgrestFilterBuilder).gt(key, opValue);
                break;
              case 'gte':
                filteredQuery =
                    (filteredQuery as PostgrestFilterBuilder).gte(key, opValue);
                break;
              case 'lt':
                filteredQuery =
                    (filteredQuery as PostgrestFilterBuilder).lt(key, opValue);
                break;
              case 'lte':
                filteredQuery =
                    (filteredQuery as PostgrestFilterBuilder).lte(key, opValue);
                break;
              case 'like':
                filteredQuery = (filteredQuery as PostgrestFilterBuilder)
                    .like(key, opValue);
                break;
              case 'ilike':
                filteredQuery = (filteredQuery as PostgrestFilterBuilder)
                    .ilike(key, opValue);
                break;
              case 'contains':
                if (opValue is List) {
                  filteredQuery = (filteredQuery as PostgrestFilterBuilder)
                      .contains(key, opValue);
                }
                break;
              default:
                filteredQuery =
                    (filteredQuery as PostgrestFilterBuilder).eq(key, value);
            }
          });
        } else {
          filteredQuery =
              (filteredQuery as PostgrestFilterBuilder).eq(key, value);
        }
      });
    }

    // Aplicar transformações
    dynamic finalQuery = filteredQuery;
    if (orderBy != null) {
      finalQuery = (finalQuery as PostgrestTransformBuilder)
          .order(orderBy, ascending: ascending ?? true);
    }

    if (limit != null) {
      finalQuery = (finalQuery as PostgrestTransformBuilder).limit(limit);
    }

    if (offset != null) {
      finalQuery = (finalQuery as PostgrestTransformBuilder)
          .range(offset, offset + (limit ?? 100));
    }

    final response = await finalQuery;
    final data = response as List<dynamic>;
    return data
        .map<AppUser>((json) => AppUser.fromJson(json as Map<String, dynamic>))
        .toList();
  }
}
